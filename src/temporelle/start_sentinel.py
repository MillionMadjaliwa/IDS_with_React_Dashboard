#!/usr/bin/env python3
"""
Script de d√©marrage simplifi√© pour Sentinel IDS
"""

import os
import sys
import subprocess
import platform
from pathlib import Path

def check_python_version():
    """V√©rifie la version de Python"""
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8+ requis")
        sys.exit(1)
    print(f"‚úÖ Python {sys.version.split()[0]}")

def check_privileges():
    """V√©rifie les privil√®ges administrateur"""
    try:
        if platform.system() == "Windows":
            import ctypes
            is_admin = ctypes.windll.shell32.IsUserAnAdmin() != 0
        else: # Linux, macOS
            is_admin = os.geteuid() == 0
        
        if not is_admin:
            print("‚ö†Ô∏è  Privil√®ges administrateur requis pour la capture de paquets")
            print("   Relancez avec : sudo python3 start_sentinel.py")
            return False
        else:
            print("‚úÖ Privil√®ges administrateur d√©tect√©s")
            return True
    except Exception as e:
        print(f"‚ö†Ô∏è  Impossible de v√©rifier les privil√®ges: {e}")
        return True



# def create_model_directory():
#     """Cr√©e le r√©pertoire des mod√®les si n√©cessaire"""
#     models_dir = Path("models")
#     models_dir.mkdir(exist_ok=True)
#     print(f"üìÅ R√©pertoire des mod√®les: {models_dir.absolute()}")

def main():
    print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                           SENTINEL IDS - D√©marrage                           ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)
    
    # V√©rifications pr√©liminaires
    check_python_version()
    
    if not check_privileges():
        print("\nüîß Solutions possibles :")
        print("   ‚Ä¢ Linux/Mac: sudo python3 start_sentinel.py")
        print("   ‚Ä¢ Windows: Ex√©cuter en tant qu'administrateur")
        print("   ‚Ä¢ Docker: docker run --privileged --net=host sentinel-ids")
        sys.exit(1)
    

    
    # Cr√©ation des r√©pertoires
    # create_model_directory()
    
    # Configuration de l'environnement
    env_file = Path(".env")
    if not env_file.exists():
        print("üìù Cr√©ation du fichier de configuration...")
        import shutil
        shutil.copy(".env.example", ".env")
        print("‚úÖ Fichier .env cr√©√© (modifiez selon vos besoins)")
    
    print("\nüöÄ D√©marrage de Sentinel IDS...")
    print("   Service WebSocket: ws://localhost:8765")
    print("   Dashboard Web: http://localhost:3000")
    print("   Logs: sentinel_capture.log")
    print("\nüìä Ouvrez le dashboard web pour voir les donn√©es en temps r√©el")
    print("üõë Appuyez sur Ctrl+C pour arr√™ter\n")
    
    # D√©marrage du service principal
    try:
        from sentinel_capture import main
        import asyncio
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë Arr√™t demand√© par l'utilisateur")
    except ImportError as e:
        print(f"‚ùå Erreur d'import: {e}")
        print("   V√©rifiez que toutes les d√©pendances sont install√©es")
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()